// <auto-generated />
using System;
using Denudey.Api.Services.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Denudey.Api.Services.Infrastructure.Migrations.StatsDb
{
    [DbContext(typeof(StatsDbContext))]
    [Migration("20250814015306_AddAcceptedAt")]
    partial class AddAcceptedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Denudey.Api.Domain.Entities.CreatorSocial", b =>
                {
                    b.Property<Guid>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CreatorId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("CreatorSocials");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.EpisodeLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "EpisodeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("EpisodeLikes");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.EpisodeView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("UserId");

                    b.ToTable("EpisodeViews");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.ProductLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("CreatorId");

                    b.ToTable("ProductLikes");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.ProductView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductViews");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.RequesterSocial", b =>
                {
                    b.Property<Guid>("RequesterId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("RequesterId");

                    b.ToTable("RequesterSocials");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.UserRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BodyPart")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("BodyPartValidated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeadLine")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveredImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ExpectedDeliveredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ExtraAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("MainPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("ManualValidated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RequestorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("TextValidated")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartValidated")
                        .HasDatabaseName("IX_UserRequests_BodyPartValidated");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserRequests_CreatedAt");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("IX_UserRequests_CreatorId");

                    b.HasIndex("DeadLine")
                        .HasDatabaseName("IX_UserRequests_DeadLine");

                    b.HasIndex("DeliveredDate")
                        .HasDatabaseName("IX_UserRequests_DeliveredDate");

                    b.HasIndex("ExpectedDeliveredDate")
                        .HasDatabaseName("IX_UserRequests_ExpectedDeliveredDate");

                    b.HasIndex("ManualValidated")
                        .HasDatabaseName("IX_UserRequests_ManualValidated");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_UserRequests_ProductId");

                    b.HasIndex("RequestorId")
                        .HasDatabaseName("IX_UserRequests_RequestorId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_UserRequests_Status");

                    b.HasIndex("TextValidated")
                        .HasDatabaseName("IX_UserRequests_TextValidated");

                    b.HasIndex("CreatorId", "Status")
                        .HasDatabaseName("IX_UserRequests_CreatorId_Status");

                    b.HasIndex("DeadLine", "ExpectedDeliveredDate")
                        .HasDatabaseName("IX_UserRequests_DeadLine_ExpectedDate");

                    b.HasIndex("RequestorId", "Status")
                        .HasDatabaseName("IX_UserRequests_RequestorId_Status");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_UserRequests_Status_CreatedAt");

                    b.HasIndex("Status", "DeliveredDate")
                        .HasDatabaseName("IX_UserRequests_Status_DeliveredDate");

                    b.HasIndex("BodyPartValidated", "TextValidated", "ManualValidated")
                        .HasDatabaseName("IX_UserRequests_ValidationStatus");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.UserWallet", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GemBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UsdBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UserId");

                    b.HasIndex("GemBalance")
                        .HasDatabaseName("IX_UserWallets_GemBalance");

                    b.HasIndex("LastUpdated")
                        .HasDatabaseName("IX_UserWallets_LastUpdated");

                    b.HasIndex("UsdBalance")
                        .HasDatabaseName("IX_UserWallets_UsdBalance");

                    b.ToTable("UserWallets");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_WalletTransactions_CreatedAt");

                    b.HasIndex("Currency")
                        .HasDatabaseName("IX_WalletTransactions_Currency");

                    b.HasIndex("RelatedEntityId")
                        .HasDatabaseName("IX_WalletTransactions_RelatedEntityId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_WalletTransactions_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_WalletTransactions_UserId");

                    b.HasIndex("RelatedEntityId", "RelatedEntityType")
                        .HasDatabaseName("IX_WalletTransactions_RelatedEntity");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_WalletTransactions_UserId_CreatedAt");

                    b.HasIndex("UserId", "Currency")
                        .HasDatabaseName("IX_WalletTransactions_UserId_Currency");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.EpisodeLike", b =>
                {
                    b.HasOne("Denudey.Api.Domain.Entities.RequesterSocial", "Requester")
                        .WithMany("EpisodeLikes")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.EpisodeView", b =>
                {
                    b.HasOne("Denudey.Api.Domain.Entities.RequesterSocial", "Requester")
                        .WithMany("EpisodeViews")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.ProductLike", b =>
                {
                    b.HasOne("Denudey.Api.Domain.Entities.CreatorSocial", "Creator")
                        .WithMany("ProductLikes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.ProductView", b =>
                {
                    b.HasOne("Denudey.Api.Domain.Entities.CreatorSocial", "Creator")
                        .WithMany("ProductViews")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.UserRequest", b =>
                {
                    b.HasOne("Denudey.Api.Domain.Entities.CreatorSocial", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserRequest_CreatorSocial");

                    b.HasOne("Denudey.Api.Domain.Entities.RequesterSocial", "Requester")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserRequest_RequesterSocial");

                    b.Navigation("Creator");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.CreatorSocial", b =>
                {
                    b.Navigation("ProductLikes");

                    b.Navigation("ProductViews");
                });

            modelBuilder.Entity("Denudey.Api.Domain.Entities.RequesterSocial", b =>
                {
                    b.Navigation("EpisodeLikes");

                    b.Navigation("EpisodeViews");
                });
#pragma warning restore 612, 618
        }
    }
}
